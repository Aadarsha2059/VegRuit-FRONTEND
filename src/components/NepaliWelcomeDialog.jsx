import React, { useState, useEffect } from 'react';
import './NepaliWelcomeDialog.css';

const NepaliWelcomeDialog = ({ isOpen, onClose, onSkipForSession, user, animationClass }) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    if (isOpen) {
      setIsVisible(true);
    }
  }, [isOpen]);

  const steps = [
    {
      title: "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§õ VegRuit ‡§Æ‡§æ! ",
      content: `‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞ ${user?.name || '‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§æ‡§•‡•Ä'}! ‡§§‡§™‡§æ‡§à‡§Ç‡§≤‡§æ‡§à VegRuit ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡§∞‡•ç‡§Æ‡§Æ‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§õ‡•§ ‡§Ø‡•ã ‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§´‡§æ‡§∞‡•ç‡§Æ‡§¨‡§æ‡§ü ‡§∏‡§ø‡§ß‡•à ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï‡§π‡§∞‡•Ç‡§∏‡§Æ‡•ç‡§Æ ‡§™‡•Å‡§ó‡•ç‡§®‡•á ‡§∏‡§¨‡•à‡§≠‡§®‡•ç‡§¶‡§æ ‡§∞‡§æ‡§Æ‡•ç‡§∞‡•ã ‡§§‡§∞‡§ø‡§ï‡§æ ‡§π‡•ã‡•§`,
      icon: ""
    },
    {
      title: "VegRuit ‡§ï‡•á ‡§π‡•ã? ",
      content: "VegRuit ‡§è‡§ï ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§¨‡§ú‡§æ‡§∞ ‡§π‡•ã ‡§ú‡§π‡§æ‡§Å ‡§§‡§™‡§æ‡§à‡§Ç ‡§Ü‡§´‡•ç‡§®‡§æ ‡§§‡§æ‡§ú‡§æ ‡§´‡§≤‡§´‡•Ç‡§≤ ‡§∞ ‡§§‡§∞‡§ï‡§æ‡§∞‡•Ä‡§π‡§∞‡•Ç ‡§∏‡§ø‡§ß‡•à ‡§¨‡•á‡§ö‡•ç‡§® ‡§∏‡§ï‡•ç‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ‡•§ ‡§Ø‡§π‡§æ‡§Å ‡§ï‡•Å‡§®‡•à ‡§¨‡§ø‡§ö‡•å‡§≤‡§ø‡§Ø‡§æ ‡§õ‡•à‡§®, ‡§∏‡§¨‡•à ‡§®‡§æ‡§´‡§æ ‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã!",
      icon: ""
    },
    {
      title: "‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§ï‡§∏‡§∞‡•Ä ‡§•‡§™‡•ç‡§®‡•á? ",
      content: "‡•ß. 'Categories' ‡§Æ‡§æ ‡§ú‡§æ‡§®‡•Å‡§π‡•ã‡§∏‡•ç\n‡•®. ‡§®‡§Ø‡§æ‡§Å category ‡§¨‡§®‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç\n‡•©. 'Products' ‡§Æ‡§æ ‡§Ü‡§´‡•ç‡§®‡§æ ‡§∏‡§æ‡§Æ‡§æ‡§®‡§π‡§∞‡•Ç ‡§•‡§™‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç\n‡•™. ‡§´‡•ã‡§ü‡•ã ‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§∞‡§æ‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç",
      icon: ""
    },
    {
      title: "‡§ó‡•Å‡§£‡§∏‡•ç‡§§‡§∞ ‡§∞‡§æ‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç ",
      content: "‚Ä¢ ‡§∏‡§ß‡•à‡§Ç ‡§§‡§æ‡§ú‡§æ ‡§∞ ‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ ‡§∏‡§æ‡§Æ‡§æ‡§® ‡§¨‡•á‡§ö‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç\n‚Ä¢ ‡§∏‡§π‡•Ä ‡§§‡•å‡§≤ ‡§∞ ‡§Æ‡§æ‡§™‡§¶‡§£‡•ç‡§° ‡§∞‡§æ‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç\n‚Ä¢ ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï‡§∏‡§Å‡§ó ‡§á‡§Æ‡§æ‡§®‡§¶‡§æ‡§∞‡•Ä‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç\n‚Ä¢ ‡§∏‡§Æ‡§Ø‡§Æ‡•à ‡§°‡•á‡§≤‡§ø‡§≠‡§∞‡•Ä ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç",
      icon: ""
    },
    {
      title: "‡§®‡§æ‡§´‡§æ ‡§∞ ‡§µ‡§´‡§æ‡§¶‡§æ‡§∞‡•Ä ",
      content: "‡§∞‡§æ‡§Æ‡•ç‡§∞‡•ã ‡§∏‡•á‡§µ‡§æ‡§≤‡•á ‡§§‡§™‡§æ‡§à‡§Ç‡§≤‡§æ‡§à:\n‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï‡§π‡§∞‡•Ç ‡§¶‡§ø‡§®‡•ç‡§õ\n‚Ä¢ ‡§¨‡§¢‡•Ä ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§Æ‡§æ ‡§¨‡•á‡§ö‡•ç‡§® ‡§Æ‡§¶‡•ç‡§¶‡§§ ‡§ó‡§∞‡•ç‡§õ\n‚Ä¢ ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§Æ‡§æ ‡§∞‡§æ‡§Æ‡•ç‡§∞‡•ã ‡§®‡§æ‡§Æ ‡§ï‡§Æ‡§æ‡§â‡§Å‡§õ\n‚Ä¢ ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä ‡§¨‡§¢‡§æ‡§â‡§Å‡§õ",
      icon: ""
    },
    {
      title: "‡§∏‡§´‡§≤‡§§‡§æ‡§ï‡§æ ‡§∏‡•Å‡§ù‡§æ‡§µ‡§π‡§∞‡•Ç ",
      content: "‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∞‡•Ç‡§™‡§Æ‡§æ ‡§®‡§Ø‡§æ‡§Å ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç ‡§•‡§™‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç\n‚Ä¢ ‡§Æ‡•å‡§∏‡§Æ‡•Ä ‡§´‡§≤‡§´‡•Ç‡§≤‡§ï‡•ã ‡§´‡§æ‡§á‡§¶‡§æ ‡§â‡§†‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç\n‚Ä¢ ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï‡§ï‡•ã ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∏‡•Å‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç\n‚Ä¢ ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§∏‡§û‡•ç‡§ú‡§æ‡§≤‡§Æ‡§æ ‡§∏‡§æ‡§ù‡§æ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç",
      icon: ""
    }
  ];

  const nextStep = () => {
    if (currentStep < steps.length) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleClose = () => {
    setIsVisible(false);
    setTimeout(() => {
      onClose();
      setCurrentStep(1);
    }, 300);
  };

  const handleSkipSession = () => {
    setIsVisible(false);
    setTimeout(() => {
      onSkipForSession();
      setCurrentStep(1);
    }, 300);
  };

  if (!isOpen) return null;

  return (
    <div className={`nepali-dialog-overlay ${animationClass || ''} ${isVisible ? 'visible' : ''}`}>
      <div className="nepali-dialog-container">
        <div className="nepali-dialog-header">
          <div className="dialog-progress">
            <div className="progress-bar">
              <div 
                className="progress-fill" 
                style={{ width: `${(currentStep / steps.length) * 100}%` }}
              ></div>
            </div>
            <span className="step-indicator">{currentStep} / {steps.length}</span>
          </div>
          <div className="dialog-controls">
            <button 
              className="skip-session-btn" 
              onClick={handleSkipSession}
              title="‡§Ø‡§∏ ‡§∏‡§§‡•ç‡§∞‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§≤‡•Å‡§ï‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç"
            >
              ‚è≠Ô∏è
            </button>
            <button 
              className="close-btn" 
              onClick={handleClose}
              title="‡§¨‡§®‡•ç‡§¶ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç"
            >
              ‚úï
            </button>
          </div>
        </div>

        <div className="nepali-dialog-content">
          <div className="step-icon">
            {steps[currentStep - 1].icon}
          </div>
          <h2 className="step-title">
            {steps[currentStep - 1].title}
          </h2>
          <div className="step-content">
            {steps[currentStep - 1].content.split('\n').map((line, index) => (
              <p key={index}>{line}</p>
            ))}
          </div>
        </div>

        <div className="nepali-dialog-footer">
          <div className="step-dots">
            {steps.map((_, index) => (
              <div 
                key={index}
                className={`step-dot ${index + 1 === currentStep ? 'active' : ''} ${index + 1 < currentStep ? 'completed' : ''}`}
                onClick={() => setCurrentStep(index + 1)}
              />
            ))}
          </div>
          
          <div className="dialog-actions">
            {currentStep > 1 && (
              <button className="btn-secondary" onClick={prevStep}>
                ‚Üê ‡§Ö‡§ò‡§ø‡§≤‡•ç‡§≤‡•ã
              </button>
            )}
            
            {currentStep < steps.length ? (
              <button className="btn-primary" onClick={nextStep}>
                ‡§Ö‡§∞‡•ç‡§ï‡•ã ‚Üí
              </button>
            ) : (
              <div className="final-actions">
                <button className="btn-secondary" onClick={handleSkipSession}>
                  ‡§Ø‡§∏ ‡§∏‡§§‡•ç‡§∞‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§®‡§¶‡•á‡§ñ‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç
                </button>
                <button className="btn-primary" onClick={handleClose}>
                  ‡§∏‡•Å‡§∞‡•Å ‡§ó‡§∞‡•å‡§Ç! üöÄ
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default NepaliWelcomeDialog;
